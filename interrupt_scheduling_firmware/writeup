Lab04: Interrupt Based Scheduling
Chase E Stewart, Jonathan Wilson

Part 1: 2
Q1. Briefly explain the clock path from start to finish (crystal to SYSCLK), including explanations for all your major register configurations.

We used the High Speed External oscillator as the source for our system clock, which goes through the PLLXTPRE divider, into PLLSRC, and finally through the PLLMUL multiplier. From here the SYSCLK affects all the other timers and clocks of the STM32f10 chip.

For the RCC_CR register, we enabled the HSE and the Clock security system.

For the RCC_CFGR register, we set the Microcontroller clock output to 110, ccorresponding to HSE. We set the PLL multiplication factor to 0111, corresponding to a multiplier of 9, and the PLLXTPRE to 1, corresponding to a divider of 2. This meant the SYSCLK was set to 16MHz * 9 / 2 = 72MHz.

For the RCC_CIR register, we cleared all the system interrupt flags by setting the corresponding clear bits high.

Part 2: 3
Q2. Describe how you determined your PWM frequency.

First, I looked online to find the period of the PWM signals and 
saw 10msec was a period within requirements. When I determined this, 
I set up the timer with the appropriate prescaler and period values 
in order to set PWM as required.

Q3. Describe how you would calculate CCR1 values for motors off, %50, and %100.

To set motors off, you need a CCR1 equal to 1msec.

To set motors at 50%, you need a CCR1 equal to 1.5msec.

To set motors at 100%, you need a CCR1 equal to 2msec.


Contribution
Indicate the percentage work contributed by each partner below (should add up to 100%). Needless to say, replace PARTNER1/2 with names.
Jonathan Wilson: 50
Chase E Stewart: 50
